version: '3'
services:
  # proftpd container
  galaxy-proftpd:
    # build: galaxy-proftpd
    image: quay.io/bgruening/galaxy-proftpd:${TAG:-latest}
    environment:
        - proftpd_db_connection=galaxy@galaxy-postgres
        - proftpd_db_username=galaxy
        - proftpd_db_password=chaopagoosaequuashie
        - proftpd_files_dir=${EXPORT_DIR:-/export}/ftp/
        - proftpd_use_sftp=True
        - proftpd_generate_ssh_key=False
        - proftpd_passive_port_low=30000
        - proftpd_passive_port_high=30010
    container_name: galaxy-proftpd
    hostname: galaxy-proftpd
    volumes:
        - ${EXPORT_DIR:-/export}/:/export
    expose:
        - 21
        - 22
    ports:
        - "8021:21"
        - "8022:22"
        - "30000-30010:30000-30010"
    restart: always
    depends_on:
      - galaxy-postgres
    networks:
      - galaxy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]


  galaxy-postgres:
    # If you are using the official postgres image, it needs to be populated by calling
    # docker-compose run galaxy install_db.sh
    # on first run
    image: quay.io/bgruening/galaxy-postgres:${TAG:-latest}
    hostname: galaxy-postgres
    environment:
        - POSTGRES_PASSWORD=chaopagoosaequuashie
        - POSTGRES_USER=galaxy
        - POSTGRES_DB=galaxy
    volumes:
        - ./postgres-storage:/var/lib/postgresql/data
    depends_on:
      - galaxy-init
    networks:
      - galaxy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]


  # PostgreSQL admin suite
  pgadmin4:
    image: thajeztah/pgadmin4
    ports:
        - "5050:5050"
    links:
        - galaxy-postgres
    # ToDO, not sure why this is failing
    #volumes:
        #- ./pgadmin:/pgadmin
    restart: unless-stopped
    networks:
      - galaxy
    deploy:
      placement:
        constraints: [node.role == manager]


  # SLURM container - this is your compute cluster :)
  galaxy-slurm:
    # build: galaxy-slurm
    image: quay.io/bgruening/galaxy-slurm:${TAG:-latest}
    environment: {}
    container_name: galaxy-slurm
    hostname: galaxy-slurm
    volumes:
        - ${EXPORT_DIR:-/export}/:/export
    restart: unless-stopped
    networks:
      - galaxy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]


  # This container initializes the galaxy export.
  galaxy-init:
    # build: galaxy-init
    image: quay.io/bgruening/galaxy-init:${TAG:-latest}
    hostname: galaxy-init
    volumes:
        # This is the directory where all your files from Galaxy will be stored
        # on your host system. By default this is 'export' in your current working dir
        - ${EXPORT_DIR:-/export}/:/export/
    networks:
      - galaxy
    deploy:
      placement:
        constraints: [node.role == manager]


  galaxy-htcondor:
    image: quay.io/bgruening/galaxy-htcondor:${TAG:-latest}
    hostname: galaxy-htcondor
    volumes:
        - ${EXPORT_DIR:-/export}/:/export
    restart: unless-stopped
    networks:
      - galaxy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]


  galaxy-htcondor-executor:
    image: quay.io/bgruening/galaxy-htcondor-executor:${TAG:-latest}
    # privileged is needed to run Docker jobs, moreover HTCondor wants
    # a RW cgroups mount. A RO cgroups mount throws an error in ProcD for running jobs.
    privileged: True
    environment:
        - CONDOR_HOST=galaxy-htcondor
    volumes:
        - ${EXPORT_DIR:-/export}/:/export
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - galaxy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]


  galaxy-htcondor-executor-big:
    image: quay.io/bgruening/galaxy-htcondor-executor
    privileged: True # HTCondor wants a RW cgroups mount. A RO cgroups mount throws an error in ProcD for running jobs.
    environment:
        - CONDOR_HOST=galaxy-htcondor
        - CONDOR_CPUS=2
        - CONDOR_MEMORY=2048
    volumes:
        - ./galaxy-storage/:/export/
        - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    networks:
      - galaxy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]


  # Message queue for better performance
  rabbitmq:
    image: rabbitmq:alpine
    hostname: rabbitmq
    environment:
        - RABBITMQ_DEFAULT_USER=galaxy
        - RABBITMQ_DEFAULT_PASS=vaiJa3ieghai2ief0jao
        - RABBITMQ_DEFAULT_VHOST=galaxy
    volumes:
        - ${EXPORT_DIR:-/export}/rabbitmq:/var/lib/rabbitmq
    networks:
      - galaxy
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == worker]


  # This container provides the galaxy uwsgi webhandlers, job handlers, nginx
  galaxy-web:
    # build: galaxy-web
    image: quay.io/bgruening/galaxy-web:${TAG:-latest}
    environment:
        # In case the galaxy-init container is not used, you need to include "sleeplock" to NONUSE
        - NONUSE=proftpd,postgres,slurmd,slurmctld
        - GALAXY_DEFAULT_ADMIN_USER=admin@galaxy.org
        - GALAXY_DEFAULT_ADMIN_PASSWORD=admin
        - GALAXY_DEFAULT_ADMIN_KEY=admin
        - GALAXY_HANDLER_NUMPROCS=2
        - UWSGI_PROCESSES=4
        - GALAXY_CONFIG_ALLOW_USER_DATASET_PURGE=True
        - GALAXY_CONFIG_ALLOW_LIBRARY_PATH_PASTE=True
        - GALAXY_CONFIG_ENABLE_USER_DELETION=True
        - GALAXY_CONFIG_ENABLE_BETA_WORKFLOW_MODULES=True
        - GALAXY_CONFIG_DATABASE_CONNECTION=postgresql://galaxy:chaopagoosaequuashie@galaxy-postgres/galaxy?client_encoding=utf8
        # Configurate admin and master api key. Can be overridden in galaxy.ini
        - GALAXY_CONFIG_ADMIN_USERS=admin@galaxy.org
        - GALAXY_CONFIG_MASTER_API_KEY=HSNiugRFvgT574F43jZ7N9F3
        - GALAXY_CONFIG_AMQP_INTERNAL_CONNECTION=amqp://galaxy:vaiJa3ieghai2ief0jao@rabbitmq/galaxy 
        # Condor
        - GALAXY_DESTINATIONS_DEFAULT=${GALAXY_DESTINATIONS_DEFAULT:-slurm_cluster}
        - ENABLE_CONDOR=true
        - CONDOR_HOST=galaxy-htcondor
        - GALAXY_CONDOR_UNIVERSE=vanilla
        - GALAXY_DOCKER_ENABLED=${GALAXY_DOCKER_ENABLED:-false}
        - GALAXY_CONFIG_CLEANUP_JOB=${GALAXY_CONFIG_CLEANUP_JOB:-onsuccess}
        # Proxy Prefix settings
        - PROXY_PREFIX=${PROXY_PREFIX:-""}
        - GALAXY_CONFIG_NGINX_X_ACCEL_REDIRECT_BASE=${GALAXY_CONFIG_NGINX_X_ACCEL_REDIRECT_BASE:-""}
        - GALAXY_CONFIG_NGINX_X_ARCHIVE_FILES_BASE=${GALAXY_CONFIG_NGINX_X_ARCHIVE_FILES_BASE:-""}
        - GALAXY_CONFIG_NGINX_UPLOAD_PATH=${GALAXY_CONFIG_NGINX_UPLOAD_PATH:-""}
    hostname: galaxy
    privileged: True
    networks:
      - galaxy
    ports:
        - "${GALAXY_PORT:-8080}:80" # nginx
    volumes:
        # This is the directory where all your files from Galaxy will be stored
        # on your host system
        - ${EXPORT_DIR:-/export}/:/export/
        - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - galaxy-init
      - galaxy-postgres
      - rabbitmq
    deploy:
      placement:
        constraints: [node.role == manager]


networks:
    galaxy:


